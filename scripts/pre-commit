#!/bin/bash
# Pre-commit hook for Python projects
# Copy this to .git/hooks/pre-commit and make executable: chmod +x .git/hooks/pre-commit

set -e  # Exit on first error

echo "üîç Running pre-commit checks for Python..."

# Check if we're in a Python project
if [ ! -f "requirements.txt" ] && [ ! -f "pyproject.toml" ] && [ ! -f "setup.py" ]; then
    echo "‚ö†Ô∏è  Not a Python project, skipping Python checks"
    exit 0
fi

# Activate virtual environment if it exists
if [ -d "venv" ] && [ -f "venv/bin/activate" ]; then
    echo "  Activating virtual environment..."
    source venv/bin/activate
elif [ -d ".venv" ] && [ -f ".venv/bin/activate" ]; then
    echo "  Activating virtual environment..."
    source .venv/bin/activate
fi

# Color output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Track if any check fails
CHECKS_FAILED=0

# Function to run check and track failures
run_check() {
    local check_name=$1
    local check_command=$2

    echo -n "  ${check_name}... "

    if eval "$check_command" > /dev/null 2>&1; then
        echo -e "${GREEN}‚úì${NC}"
        return 0
    else
        echo -e "${RED}‚úó${NC}"
        CHECKS_FAILED=1
        return 1
    fi
}

# Determine source directories
SRC_DIRS=""
[ -d "src" ] && SRC_DIRS="$SRC_DIRS src"
[ -d "tests" ] && SRC_DIRS="$SRC_DIRS tests"
[ -d "app" ] && SRC_DIRS="$SRC_DIRS app"
[ -d "scripts" ] && SRC_DIRS="$SRC_DIRS scripts"

if [ -z "$SRC_DIRS" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  No source directories found (src/, tests/, app/, scripts/), skipping checks${NC}"
    exit 0
fi

echo "  Checking directories: $SRC_DIRS"

# 1. Code formatting with Black (if installed)
if command -v black &> /dev/null; then
    run_check "Black formatting" "black --check $SRC_DIRS"
else
    echo -e "  ${YELLOW}Black not installed, skipping formatting check${NC}"
fi

# 2. Linting with Ruff (if installed)
if command -v ruff &> /dev/null; then
    run_check "Ruff linting" "ruff check $SRC_DIRS"
else
    echo -e "  ${YELLOW}Ruff not installed, skipping linting check${NC}"
fi

# 3. Type checking with mypy (if installed)
if command -v mypy &> /dev/null; then
    # Only check src/ for type hints, tests often have issues
    if [ -d "src" ]; then
        run_check "Mypy type checking" "mypy src --ignore-missing-imports"
    fi
else
    echo -e "  ${YELLOW}Mypy not installed, skipping type check${NC}"
fi

# 4. Security check with bandit (if installed)
if command -v bandit &> /dev/null; then
    run_check "Bandit security scan" "bandit -r $SRC_DIRS -ll -q"
else
    echo -e "  ${YELLOW}Bandit not installed, skipping security scan${NC}"
fi

# 5. Import sorting handled by Ruff (included in step 2)

# Final result
echo ""
if [ $CHECKS_FAILED -eq 0 ]; then
    echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
    exit 0
else
    echo -e "${RED}‚ùå Pre-commit checks failed. Please fix the issues above.${NC}"
    echo ""
    echo "Quick fixes:"
    echo "  black $SRC_DIRS              # Auto-format code"
    echo "  ruff check --fix $SRC_DIRS   # Auto-fix linting and import issues"
    echo "  mypy src                     # View type issues"
    echo ""
    echo "To skip pre-commit hooks (not recommended): git commit --no-verify"
    exit 1
fi
